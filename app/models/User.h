// app/models/User.h
#pragma once

#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h> // For timestamps
#include <trantor/utils/Utilities.h> // For UUID generation if needed

namespace comfyui_plus_backend
{
namespace app
{
namespace models
{

class User
{
  public:
    User() = default;
    User(const drogon::orm::Row &row); // Constructor from ORM Row

    // Getters and Setters will be generated by anet (Drogon's tool)
    // if you use ///ANET_MODEL_BEGIN and ///ANET_MODEL_END comments
    // However, for manual definition:

    // Primary Key
    // ///धारावाहिक स्तंभ (प्राथमिक कुंजी, स्वतः वृद्धि)
    // ORM_FIELD(std::optional<std::int64_t>, id)
    // ORM_FIELD_PRIMARY_KEY
    // ORM_FIELD_AUTO_INCREMENT
    std::optional<std::int64_t> getId() const { return id_; }
    void setId(const std::int64_t &id) { id_ = id; }

    // /// अद्वितीय स्तंभ (अद्वितीय सूचकांक)
    // ORM_FIELD(std::string, username)
    // ORM_FIELD_UNIQUENESS
    std::string getUsername() const { return username_; }
    void setUsername(const std::string &username) { username_ = username; }

    // /// स्तंभ (अद्वितीय सूचकांक)
    // ORM_FIELD(std::string, email)
    // ORM_FIELD_UNIQUENESS
    std::string getEmail() const { return email_; }
    void setEmail(const std::string &email) { email_ = email; }

    // /// स्तंभ
    // ORM_FIELD(std::string, hashed_password)
    std::string getHashedPassword() const { return hashedPassword_; }
    void setHashedPassword(const std::string &hashedPassword) { hashedPassword_ = hashedPassword; }

    // /// स्तंभ
    // ORM_FIELD(trantor::Date, created_at)
    trantor::Date getCreatedAt() const { return createdAt_; }
    void setCreatedAt(const trantor::Date &createdAt) { createdAt_ = createdAt; }

    // /// स्तंभ
    // ORM_FIELD(trantor::Date, updated_at)
    trantor::Date getUpdatedAt() const { return updatedAt_; }
    void setUpdatedAt(const trantor::Date &updatedAt) { updatedAt_ = updatedAt; }


    // You can also use ///ANET_MODEL_BEGIN and ///ANET_MODEL_END
    // and let anet generate the getters/setters.
    // If you do, remove the manual getters/setters above.
    /// ANET_MODEL_BEGIN
    /// ANET_DBCONSTRAINT(PRIMARY KEY(id))
    /// ANET_DBCONSTRAINT(UNIQUE(username))
    /// ANET_DBCONSTRAINT(UNIQUE(email))
    std::optional<int64_t> id_;
    std::string username_;
    std::string email_;
    std::string hashedPassword_; // Renamed for clarity
    trantor::Date createdAt_;
    trantor::Date updatedAt_;
    /// ANET_MODEL_END
};

// If you use ANET comments, you'd typically also have this
// DROGON_DECLARE_MODEL(User)

} // namespace models
} // namespace app
} // namespace comfyui_plus_backend

// Register User model with Drogon ORM (outside namespaces)
// This helps Drogon's ORM find your model.
// Put this in User.cc or a dedicated models_registration.cc
// #include "User.h"
// #include <drogon/orm/DbClient.h>
// namespace comfyui_plus_backend { namespace app { namespace models {
//     const std::string User::Cols::id = "id";
//     // ... define other Col names if needed ...
// }}}
//
// Or, if using ANET_MODEL_BEGIN/END, anet might generate some of this.
// For manual mapping, you might need to write a custom mapper if not using ANET.
// For now, focus on the class definition.